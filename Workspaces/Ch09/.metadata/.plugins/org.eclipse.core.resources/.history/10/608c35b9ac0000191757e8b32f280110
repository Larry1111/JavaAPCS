import java.awt.Color;
import java.util.Scanner;

public class Examples {
	
	public static void printIntArray(String[][] strings) {

		for(int i=0; i< strings.length; i++) 
			System.out.print(strings[i]+" "); 
		System.out.println();
	}
	//3
	public static void swapFirstLast(int[] a) {
		int i = a.length -1;
		if (i >= 2)
		  {
		    int temp = a[0];
		    a[0] = a[i];
		    a[i] = temp;
		} 
	}
	//5
	public static char getRandomRps(char[] a) {
		int i = (int)(Math.random()*a.length);
		return a[i];
	}
	//27
	public static double averageTopTwo(int[] scores)
	{
		int i,n = scores.length;
		int iMax1 = 0;
		int iMax2 = 1;
		if (scores[iMax2]> scores[iMax1])
		{
			i = iMax1;
			iMax1 = iMax2;
			iMax2 = i;
		
		}
		for (i = 2;i < n; i++)
		{
			if (scores[i] > scores[iMax1])
			{
				iMax2 = iMax1;
				iMax1 = i;
			}
			else if(scores[i] > scores[iMax2]) {
				iMax2 = i;

			}
		}
		return (scores[iMax1] + scores[iMax2])/2;
	}
//	public static int[][] input2D(int row, int col) 
//	{
//		int[][] a = new int[row][col];
//		Scanner kboard = new Scanner(System.in);
//		
//		for(int r= 0; r<row; r++) {
//			for(int c= 0 ;c < col;c++) {
//				System.out.print("Enter a[" + r + "][" + c + "]:");
//				a[r][c] = kboard.nextInt();}
//			}
//		return a;
//	}
	public static void output2D(String[][] a1)
		{
			for(int r= 0; r<  a1.length; r++) {
				for(int c = 0; c < a1[r].length; c++)
				{
					System.out.print(  a1[r][c] + " ");
				}
				System.out.println();
			}
		}

			//output2D(array);
	
	int[][] array2 = {{1,2,3},{4,5},{6,7,8,9}};
	//output2D(array2);
	//}
//13
	// if (i ==j || i + j == n-1)
//14
		private static double positiveMax(int[][] m)
		{
		  int mMax = 0;
		  for (int r = 0; r < m.length; r++)
		    for (int c = 0; c < m[0].length; c++)
		      if (m[r][c] > mMax)
		        mMax = m[r][c];
		  return mMax;//find the position instead of value
		}
//18 
		public static int sumOfValue(int[] a) {
			int sum =0;
			for (int x: a)
				sum+=x;
			return sum;
		}
		public static int[] sumOfRow(int[][] t) {
			int[] sums = new int[t.length];//number of rows in t
			  int k = 0;
			  for (int[] row : t)
			  {
			    sums[k++] = sumOfValue(row);
			  }
			  return sums;
			}
		public static int positiveMax2(int[][]m)
		{
			int mMax = 0;
			  for (int[] row:m)
			    for (int x: row)
			      if (mMax<x)
			        mMax = x;
			  return mMax;//only find the value instead of the postion
		}
		//4
		//6
		//mysteryCount method counts the number of 0s in array v.
		//9
		public static int[] makePythagoreanTriple(int m, int n)
		{
			
		}
		//10
		public static int[] createWedge(int n)
		{
			int[]a = new int[n];
			for(int i = 0; i<n;i++)
			{
				a[i]=i;
			}
			return a;
		}
		//11
		public static int[] Fibonacci(int n)
		{
			
		}
		//15
		public void fillCheckerboard(Color[][] board)
		{
			
		}
		//20
		public int[][] pascalTriangle(int n)
		{
			
		}
		//22
		
		//23
		public static boolean detMedian(int[] n)
		{
			
		}
public static void main(String[] args) {
			System.out.println(createWedge(5));
//			int[][]array = input2D(2,3);
//	public static void main(String[] args) {
//		//int[] arr = new int[3];
//		//arr = new int{1,2,3};
//		//or
//		int[][] arr = {{1,3,5,7,9},{2,4,5},{245,145,10,13}};
//		printIntArray(sumOfRow(arr));
//		
//	}
}
}

