import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JPanel;

public class ControlPanel extends JPanel implements ActionListener, KeyListener{
	private ImagePanel canvas;
	private String imageFolderPathname;
	private JButton forward, reverse;
	private JComboBox<String> imageList;
	private String[] fileNames, comboBoxNames;
	private int currentIndex;
	public ControlPanel(ImagePanel img, String path)
	{
		imageFolderPathname = path;
		canvas = img;
		File folder = new File(imageFolderPathname);
		fileNames = folder.list(); 
		if(fileNames == null || fileNames.length == 0)
		{
			System.out.println("*** The folder " + 
				imageFolderPathname + " does not exist or is empty ***");
			System.exit(1);
		}
		imageList = new JComboBox<String>(fileNames);
		JPanel buttons = new JPanel();
		buttons.setLayout(new GridLayout(1,3));
		buttons.setBackground(this.getBackground());
		forward = new JButton();
		forward.setIcon(new ImageIcon("arrow-left.gif"));
		reverse = new JButton();
		reverse.setIcon(new ImageIcon("arrow-right.gif"));
		buttons.add(forward);
		buttons.add(imageList);
		buttons.add(reverse);
		forward.addActionListener(this);
		reverse.addActionListener(this);
		imageList.addActionListener(this);
		add(buttons, BorderLayout.SOUTH);
		currentIndex = 0;
		canvas.readImage(path + "/" + fileNames[currentIndex]);
		
	}
	public void actionPerformed(ActionEvent e)
	{
		if(e.getSource().equals(forward))
		{
			currentIndex++;
		}
		if(e.getSource().equals(reverse))
		{
			currentIndex--;
		}
		if(e.getSource().equals(imageList))
		{
			currentIndex = imageList.getSelectedIndex();
		}
		imageList.setSelectedIndex(currentIndex);
		canvas.readImage(imageFolderPathname + "/"+fileNames[currentIndex]);
		canvas.repaint();
		requestFocus();
		
	}
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		int b = e.getKeyCode();
		switch(b)
		{
		case 13:
			currentIndex++;
			break;
		case 9:
			currentIndex++;
			break;
		case 39:
			currentIndex++;
			break;
		case 32:
			currentIndex++;
			break;
		case 37:
			currentIndex--;
			break;
		case 38:
			currentIndex--;
			break;
		case 27:
			System.exit(1);
			break;
		}
		requestFocus();
		canvas.repaint();
	}
	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
}
