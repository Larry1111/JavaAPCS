import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class GraphingData extends JPanel {
    int[] data = {
    1, 0, 0, 0, -2, 2, 0, -6, -6, 6, 0, -4, 4, -10, -14, 10, 4, 14, -30, -42, 0, -42, -18, 12, 30, 18, -12, 0, 18, 42, 0, -62, -8, -70, -20, -82, -28, -34, -62, -8, -26, 8, -62, 62, 34, -28, 8, -28, 28, 62, 82, -8, 98, 28, 0, -186, -84, -210, -60, -24, -150, -36, -102, -162, 0, -60, -90, 60, -90, -24, 84, -102, -126, 24, -66, -126, 66, 42, 126, 102, 24, 90, -60, 150, -36, 0, 186, 162, 102, -24, 60, -24, 24, 60, 84, 24, 126, -56, -310, -196, -238, -164, -254, -56, -310, 56, -254, 40, -338, -16, -394, -52, 16, -238, -322, 124, -130, -254, -56, -146, -16, 140, 16, -170, -130, -56, 56, -254, -214, -16, -58, -182, -238, 56, 124, 254, 130, -16, 58, 214, -40, 130, -124, -56, 74, -68, 170, 238, -16, -140, 146, 310, 56, -68, 68, -56, -16, 394, 338, 214, 124, 322, 56, 124, 418, 40, -16, 326, 434, 310, 124, 254, -762, -120, -882, -168, -678, -252, -762, -372, -930, -462, -204, -72, -834, -252, -372, -462, -72, -882, 120, -510, -438, -300, -390, 0, 72, -300, 168, -594, -204, -714, -132, 168, -462, -252, -762, -258, 132, -378, 204, -48, -558, -426, -510, 132, -630, 252, -510, -120, 48, -510, 372, -510, -186, 72, 204, -558, -390, -258, 0, -186, -558, 300, -210, -462, 372, 120, -258, -342, -138, -258, -252, 138, 462, -300, -420, 0, -120, -372, 90, 558, -204, 438, 186, 0, 258, -120, 306, 390, -372, 120, 378, 210, 630, 120, 258, 462, -48, 426, 306, 120, 510, -252, 630, -132, 0, 258, 642, 204, -168, 0, -48, 558, 180, -72, 762, 510, 0, 810, 438, 252, 642, 252, 510, 462, -48, 582, 204, 420, 810, 558, 48, 372, 252, 930, 300, 558, 120, -508, -1778, -620, -32, -1054, -1562, -280, -1166, -1922, 32, -80, -1102, -328, -836, -1858, -248, -112, -910, -1270, -1778, -428, -676, -788, -1810, -878, -1126, -1238, -724, 112, -136, -1666, -508, -248, -260, -1282, -620, -806, -292, -1054, -1562, -404, -742, 32, -476, -1498, -340, -80, -1610, -1022, 136, -1394, -148, 112, -1418, -1022, -694, 80, -428, -1138, 32, -662, -910, -1418, -260, -1282, -508, -626, -1382, 476, 364, 116, -392, 292, -1102, 508, -514, -1022, -1270, -112, -874, -1382, 620, 112, -650, -514, -1022, 260, -1270, 340, -682, -32, -280, 652, -1126, 292, 112, -910, -136, 508, -514, -266, 644, 136, -626, -298, 476, -32, -1166, -742, 676, -854, -80, 248, -1022, -626, 620, 112, -266, 508, -514, -806, 476, -122, -370, -878, 32, 868, 620, 248, -514, -508, -248, 910, 482, -788, 878, 1054, -328, -836, 1022, 266, -112, -620, 112, 886, 1022, 514, 266, -32, 482, 742, -280, -364, 112, 626, -136, 1022, -508, -248, 1270, 248, -508, 136, -620, 1238, -32, 482, 370, -652, -476, 682, 1022, 910, 1382, 874, -148, 112, 626, 328, 80, -292, 482, -116, 1166, 658, 280, 794, 32, 874, -148, 248, 514, -508, 1282, -112, 662, 1498, -32, -280, 878, 116, 292, -80, 1202, 694, 260, 1418, 910, 662, 112, -136, 1022, 260, 1498, -32, 1250, 652, 1562, 1054, 292, 886, -136, 1282, 248, 508, 1022, 136, 1238, 1498, 1634, 788, 280, 1054, 32, 676, 1450, 428, 248, 508, -112, 1270, 1858, 836, 328, 1102, 724, 1238, 476, 1810, 788, 1562, 1642, 112, 508, 1022, -2046, -3570, -3810, -96, -1116, -2646, -840, -1860, -3906, -240, -600, -2382, -840, -2886, -924, -2970, -144, -2190, -1668, -2046, -1020, -3570, -240, -2790, 96, -408, -3066, -240, -2286, -1764, -780, -2310, -1020, -2922, -1380, -600, -780, -2826, -504, -3570, -1902, -360, -3426, 336, -1710, -1188, -2454, 240, -780, -2826, -2310, -1710, -684, 96, -2970, -2826, -3330, -1020, -2550, -1020, -1260, -3306, -1638, -96, -2142, 168, -2898, 504, -2562, -1782, -3306, 168, -1878, -336, -1356, -2970, -2706, -3066, -1782, -756, -240, -3306, 600, -924, 360, -3210, -1260, -2322, -780, 0, -2418, -876, -2658, -1302, -276, 240, -2826, -2562, -1020, -2418, 144, -876, -2142, 840, -2226, -1710, 600, -1446, -924, -2970, -2826, -2046, -1206, -420, 96, -2970, -1806, -780, -1542, 0, -3066, -1770, 924, -2646, -1362, -1866, 0, -504, 276, -1626, -2646, 684, -336, -408, 372, -2694, 1020, 780, -2286, -744, -1434, -144, -1026, -2046, 240, -1290, 1020, -2046, -2550, 144, 660, -1386, -2142, -600, 1260, -786, 756, -2550, 144, -1902, -1386, -600, -2646, -690, -2214, 1116, -1950, -1434, 0, -1530, 1356, 336, -168, -1950, -2046, -1542, 1020, -2046, -762, 264, 780, -1266, 408, -858, 684, -336, 504, -2046, 264, 924, -96, -2142, 168, -666, -1686, -2190, 1020, -2046, 264, -240, -426, -1950, -666, 876, -1170, 1524, 504, -1026, 0, -1782, 780, 1260, -1806, -378, -1398, -618, 1764, 0, -378, -1638, -1122, 336, 600, -930, -1950, 744, -522, 1020, -2046, 1356, -690, 600, 1764, 1260, -522, 504, -2046, -1020, -240, 282, 690, -1356, -840, 0, 1542, 522, 786, -1116, 1710, -1356, 186, -1860, 1122, -1428, -648, 378, -1020, 522, -240, 1302, 2142, -924, 1902, -1164, 1398, -1668, 1026, -504, 786, 282, 1026, -504, 1950, -96, 1266, 1782, 2046, -504, 1446, 2382, 96, -924, 1638, 240, 1782, -264, 2046, 1026, -684, -1188, -408, 762, 522, 504, 1530, 2310, -756, 2454, 408, 930, -1116, 1194, -1356, 1026, 2310, 1950, -96, -336, 690, -420, 2142, 360, -516, 0, 1026, 2310, 1806, 2142, -924, 1386, -660, 504, 264, -240, -1260, 1770, 648, 1674, -876, 2454, -612, -96, 2790, -276, -780, 1530, 2046, 1674, 144, 408, -1116, 840, 2646, 1122, -276, -1020, 1866, 2646, -420, 2142, -780, -516, 2562, 780, 2322, -96, 420, 1446, 684, 1206, 2046, 516, -504, 1806, 684, 3162, 612, 1638, 2418, 1020, 2046, 1806, -240, 2658, 3066, 780, 2322, 2802, 516, 3210, 1164, 1950, 2466, -600, 3306, 756, 1020, 1542, 1164, 2706, 2970, 1950, 420, 1446, 336, 2898, 2142, 2658, -408, 2286, 240, 1020, 0, 2382, 96, 612, 3306, 2046, 2562, 3570, 504, 1020, 1284, 264, 2454, 924, -96, 1710, 3066, 2046, 0, 1950, 3234, 3162, 96, 2406, 3570, 2046, 780, 3666, 2646, 600, 1116, 1902, 1524, 0, 264, 1806, 3810, 2286, 240, 1020, 2970, 3306, 1260, 3570, 648, 2454, 924, 2886, 3666, 600, 3162, 2142, 2790, 240, 2550, 1020, 1620, 3810, 744, 1260, 1524, 0, -496, -5606, -3556, -6362, -1240, -3284, -4814, -6202, -3124, -560, -7714, -4382, -2332, -1304, -6922, -3844, -952, -160, -5270, -656, -1672, -4094, -2044, -4318, -6362, -3284, -7378, -5830, -7874, -2836, -4366, -2540, 160, -856, -6994, -1352, -5446, -7490, -4654, -3620, -1756, -2252, -6346, 64, -7090, -4526, -2476, 224, -5914, -6410, -3332, -2044, -1016, -496, -2540, -5606, -3598, -520, -6658, -5110, 272, -1772, -4838, -224, -1240, -4678, -6722, -3886, -5930, -4382, -2332, -7442, -1484, -5578, 64, -2996, -7090, -3758, -6298, -3220, -5110, 272, -1772, -2788, -6362, -3374, -296, -4390, -5642, -520, -6658, -4094, -2044, -1388, 160, -3934, -856, -3662, -4678, -3310, -6370, -1756, -5578, -2500, 64, -7090, -1324, -296, -1820, -2836, -3598, -6658, -4094, -1016, -1028, -4094, -5618, -496, -224, -2764, 952, -3142, -2108, -6698, -5410, -4382, -784, -2828, -6922, -964, -4526, 856, -6298, -1684, -4750, -1028, -4094, -2044, -5618, -496, -2540, -6634, -1748, -5842, -4814, 1240, -4898, -3350, -272, -5122, 520, -2540, -2918, -3934, -5978, -3638, 1304, -1756, -3286, -5330, -2252, -6346, -4030, 584, -2476, -1820, -5914, -272, 1016, -5618, -496, -532, -3598, -5642, -1028, -4850, 272, -1252, -4318, -6362, -3662, -3142, -64, -820, 208, -5930, -4382, 1576, -2518, -5578, -4030, -6074, -1708, -3238, -2582, 496, -3598, -1028, -2044, -5866, -1252

    };
    final int PAD = 100;
 
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                            RenderingHints.VALUE_ANTIALIAS_ON);
        int w = getWidth();
        int h = getHeight();
        // Draw ordinate.
        g2.draw(new Line2D.Double(PAD, PAD, PAD, h-PAD/2));
        // Draw abcissa.
        g2.draw(new Line2D.Double(PAD, h-PAD, w-PAD, h-PAD));
        double xInc = (double)(w - 2*PAD)/(data.length-1);
        double scale = (double)(h - 2*PAD)/getMax();
        // Mark data points.
        g2.setPaint(Color.red);
        for(int i = 0; i < data.length; i++) {
            double x = PAD + i*xInc;
            double y = h - PAD - scale*data[i];
            g2.fill(new Ellipse2D.Double(x-2, y-2, 4, 4));
        }
    }
 
    private int getMax() {
        int max = -Integer.MAX_VALUE;
        for(int i = 0; i < data.length; i++) {
            if(data[i] > max)
                max = data[i];
        }
        return max;
    }
 
    public static void main(String[] args) {
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.add(new GraphingData());
        f.setSize(400,400);
        f.setLocation(200,200);
        f.setVisible(true);
    }
}