import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class GraphingData extends JPanel {
    int[] data = {
    0, 0, 4, -4, 4, -4, 4, -4, 4, -72, 0, -24, 0, -48, -24, -24, -48, 24, 0, 24, -24, -24, 0, -24, 24, 72, 24, 48, 0, 24, -124, -20, -164, -412, -452, 20, -124, -268, -164, -308, -332, 20, -20, -268, -164, -412, 20, -268, -44, -292, -188, -332, 20, 124, -20, -164, -308, 44, 20, 124, -124, -164, 20, 124, -124, -20, 164, 20, -20, -268, -44, -188, 20, -124, -124, -20, -164, 44, 268, -124, -164, 188, 268, 20, -124, -20, -164, 164, 268, 20, 124, -44, 164, 268, -124, 124, -20, 292, 44, 332, 188, 268, 124, -20, 332, 308, 268, 124, -20, 452, 308, 164, 268, 20, -120, -360, -1608, -1104, -1248, -1992, -240, -1728, -624, -1368, -360, 0, -1992, -2232, -624, -1368, -2112, -1608, 120, -624, -120, -2112, -1608, -744, -984, -1872, -120, -360, -1608, -504, -1752, -1992, -1128, -624, -1872, -1368, -384, 120, -1128, -624, -504, 0, -1992, -1632, -624, -120, -864, -1008, -744, -240, -384, -1128, -120, -864, -1632, -1128, -1872, -120, 240, -1008, -1752, -1992, 360, 120, -1128, -1872, -504, 0, -1248, -744, -888, -1632, -624, -1368, -1392, 480, -768, -1008, 0, 360, -384, -1128, 480, -1008, -504, -1248, -1392, 360, -384, -1872, -1368, 0, -1248, -744, -1488, 264, -480, 624, -624, -120, -1608, 144, 0, 384, -360, -1104, 624, -1608, -1248, -984, 120, -1128, -624, -1368, -360, 744, -504, -1248, 264, 624, -624, -120, -1368, -864, -1608, 624, -864, 744, -744, -1488, -384, -1128, -120, 384, -1008, -504, -240, 864, 120, -1128, -624, -1368, 384, 360, 120, 240, -504, 0, -1248, -624, -120, -1368, -1008, 504, -744, -384, 624, -120, -144, -888, 480, -264, 240, -1008, 1104, 864, -624, 984, 0, 864, 120, 624, -624, 624, -624, -864, 1248, 504, -240, 1128, -120, -1104, 1248, -480, -624, 384, -360, 144, -1104, 120, 1128, 384, 744, -504, -744, 120, -120, -864, 1248, 0, 504, -744, -984, 1128, -120, -384, 1368, 624, 1128, -120, 240, 1248, -384, 240, 744, 0, 1008, 624, -624, -120, 1608, 624, -624, -120, 1488, 744, 0, 504, -384, 1368, 240, -504, 1248, 504, 1608, 864, 1128, 1104, 1608, 360, -384, 120, -624, 1488, 744, 0, 864, 1368, 624, -264, 744, 0, 1104, 624, 1392, 1752, -240, 264, -480, 1872, 1128, 0, 1512, 264, -120, 888, 1392, 624, 888, 1248, 0, 504, 1512, 1368, 624, 1128, -120, 384, -360, 1248, 1752, 504, -240, 120, 1872, 1632, -360, 864, 1128, 1488, 0, 1752, 1008, 2112, 864, -120, 744, 1248, 504, 2112, 1368, 1872, 360, 1368, 1128, 984, 240, 1248, 1608, 120, 984, 1488, 744, 0, 1752, -120, 2352, 2112, 120, 624, 1488, 1992, 0, 2112, 1368, 480, 984, 240, 360, 120, 1872, -4364, -7588, -5084, -11332, -820, -4564, -2060, -6548, -10292, -5284, -2780, -9772, 100, -6148, -3644, -9892, -2380, -11852, -100, -3844, -7588, -11332, -8828, -9572, -820, -8308, -5804, -10292, -1540, -2780, -9028, -10412, -1660, -3644, -7388, -6868, -11852, -3844, -1340, -7588, -5084, -11332, -2060, -12052, -940, -4684, -2924, -9172, -6668, -10412, -1660, -5404, -3644, -9892, -2380, -620, -6868, -8108, -3844, -7588, -5084, -8828, -220, -3964, -7708, -9692, -2180, -8428, -2924, -1660, -5404, 100, -9892, -11132, -3124, -6868, -10612, -620, -4364, -10612, -8852, -7588, -5084, -5828, -2060, -8308, -6548, -5284, 220, -6028, -7268, -2404, 100, -9892, -3124, -620, -4364, -10612, -8108, -8852, -100, -7588, -5084, -4564, -10292, 820, -5428, -2924, -6668, -10412, -1660, -2404, -11132, 620, -3124, -8108, -8852, -1340, -7588, -11332, -820, -2204, -8452, -5948, -9692, -5428, -2924, -9172, -2404, 620, -620, -4364, -10612, -8852, -100, -1340, -7588, -5228, -8972, -220, -1460, -7708, -5948, -9692, -4684, -2404, -3644, -9892, -11132, -3124, -6868, -8108, -620, -4364, -8852, -1340, -7588, -820, -4564, 940, -2804, -6548, 220, -6028, -7268, -2404, -6148, -3644, -9892, -7388, -4364, -10612, -100, -3844, -5828, -820, -4564, -5308, -1540, -2924, -9172, -6668, -10412, 1340, -2404, -6148, -7388, -8132, -620, -5108, -1340, -7588, -8332, -5828, 1540, -8452, -5428, -2924, -9172, -6668, -10412, 1340, -6148, -3644, 620, -100, -1340, -1484, -8972, -4708, -8452, -9692, 820, -5428, -2924, -6668, 1340, -2404, -3644, -9892, -7388, -3124, -6868, -10612, -4388, -8132, 620, -620, -6868, -8852, 1660, -8332, -1564, 940, -2804, -10292, 1460, -2284, -6028, -9772, -3644, -4388, -3124, -620, -7612, -8852, -3844, -8332, -1564, 940, -5308, -2804, 820, -6668, -7412, 1340, -3644, -4388, -8132, -6868, -5108, -3844, 1660, 1540, -2204, -5948, -9692, -1684, -5428, -2924, -9172, 1340, -2404, 100, -6148, -9892, -620, -1364, -7612, -5108, 2260, -3988, -1484, -8972, -220, -964, 1540, -1684, -5428, -9172, -6668, 1340, 100, -6868, -8132, 620, -3124, 2380, -3868, -1364, -7612, -8852, -4588, -8332, -5828, 2180, 940, -2804, -2284, 220, -6028, -9772, -6892, -4388, 620, 2380, -1364, -5108, -100, -844, -8332, -5828, -9572, 2180, -1564, 940, -2804, -9052, -6692, 2060, -2924, -3668, -6148, -644, -8132, -3868, 1660, -2084, -964, 1540, -6692, -1684, -5428, -2924, -3668, -2404, -6148, -6892, -8132, 620, 2380, -5108, -100, 2260, -3988, -5228, 2780, -4708, -5948, -2924, -9172, -3668, 1340, -2404, 100, -6892, -3124, -620, -4364, -8108, 644, -100, -1340, -8828, 2924, 1684, -2060, -5804, -6548, -1540, -5284, -3524, -7268, 1484, -2260, -6004, -6148, -7388, -2380, 644, -100, -8828, 2924, -8308, -5804, 2204, 964, 844, -6148, -2380, 3124, -3124, -4364, -8108, 644, -100, 2404, -8828, -820, -8308, -940, -2924, -6668, 2084, -5404, -6148, -7388, 1364, 3124, -3124, -6868, -8108, -3844, -1340, 2284, -3964, -5948, 2804, 1564, -4684, -2924, -5404, 100, -6148, -3644, 1364, -620, -4364, -8108, 644, -3124, -8108, -100, 2404, -1340, -2060, -8308, -6548, 2204, -1540, 964, 220, -3524, 1484, -2260, 3844, -3644, -7388, 620, -6868, -4364, -100, -7588, -5828, -2804, -6548, 964, 820, -5428, 3844, -6148, 620, -620, -4364, -100, 2404, -3844, -7588, -5828, -820, -4564, -2060, -2204, -2924, -1660, 100, -6148, 1364, 3124, -3124, -8108, 3644, -7588, -3964, 2804, -940, -2924, 3844, 100, -6148, 620, 3124, -620, -6868, -8108, 620, -620, -4364, -5108, -100, 2404, -1340, -7588, -5828, 2924, -4564, 940, -2804, -6548, 2204, -2284, 220, 1484, -6148, -3644, -7388, -6868, -4364, 3644, -100, 2404, -7588, -2084, -820, -4564, 940, 2204, -1684, 820, -5428, -6148, -3644, -620, -4364, -5108, 2404, -2084, -820, -4564, 1540, -4708, -2204, 4564, 820, -6668, 1340, -2404, 100, -7388, 4364, -3124, -3844, -5228, 3524, -220, -5948, -1684, -5428, -6668, 3844, 100, -6148, -3644, 4364, 3124, -620, -4364, -620, 3644, -100, 2404, -4588, 2924, -5308, -6548, 2204, 3964, -2284, 220, -3524, -2404, -6148, -3644, 620, 3124, -3124, -620, 3644, -100, -4588, -1564, -2804, -6548, 2060, 820, -5428, -6148, -3644, -4388, 4364, -3124, -620, 3644, -100, 5284, -2204, 2804, 2060, 820, -5428, -2924, -2404, -3644, 4364, -620, -6868, -5108, -3844, 2260, -3988, 3524, -220, -2204, -5948, 2060, 4564, -5428, -2924, -6668, 1340, -2404, -6148, 4364, 620, 3124, -620, -644, 4364, -3868, -1364, -844, 1660, -5828, 2924, 4684, 940, -5308, -6548, 3964, -2284, 220, 1340, -2404, -3124, -3868, -1364, 3644, 5404, -2084, -5828, 2924, -6548, 5804, 2060, 4564, -1684, -3668, 3844, -2404, -6148, -4388, 620, 3644, -844, -4588, 2780, -964, 1540, 5804, 2060, 4564, -2924, 5084, 1340, -6148, -644, -4388, 3124, 2380, -5108, 3644, 2260, 2780, 5284, -964, -2204, 4564, -5428, -2924, 1340, 3844, -2404, -6148, 3124, 3124, 4388, 644, -100, -1340, -5084, 3668, 5428, -820, 1684, -4564, 4708, -1540, 964, -2780, -3524, 3988, 244, 5108, 3868, -620, -4364, 644, 6148, 1684, 5948, -1540, -5284, -2780, -2924, 5828, -1660, -5404, 5108, 3124, -3124, -4364, 644, -5084, 3668, -820, -4564, -2060, -5804, 1564, -4684, 5828, 2084, 4588, 100, 5108, 1364, -3124, -620, -4364, 6148, 2404, -3844, 3668, -220, 2284, 6548, 2804, -2180, -2924, 5828, 4588, -5404, 1364, -2380

    };
    final int PAD = 100;
 
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                            RenderingHints.VALUE_ANTIALIAS_ON);
        int w = getWidth();
        int h = getHeight();
        // Draw ordinate.
        g2.draw(new Line2D.Double(PAD, PAD, PAD, h-PAD/2));
        // Draw abcissa.
        g2.draw(new Line2D.Double(PAD, h-PAD, w-PAD, h-PAD));
        double xInc = (double)(w - 2*PAD)/(data.length-1);
        double scale = (double)(h - 2*PAD)/getMax();
        // Mark data points.
        g2.setPaint(Color.red);
        for(int i = 0; i < data.length; i++) {
            double x = PAD + i*xInc;
            double y = h - PAD - scale*data[i];
            g2.fill(new Ellipse2D.Double(x-2, y-2, 4, 4));
        }
    }
 
    private int getMax() {
        int max = -Integer.MAX_VALUE;
        for(int i = 0; i < data.length; i++) {
            if(data[i] > max)
                max = data[i];
        }
        return max;
    }
 
    public static void main(String[] args) {
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.add(new GraphingData());
        f.setSize(400,400);
        f.setLocation(200,200);
        f.setVisible(true);
    }
}