import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class GraphingData extends JPanel {
    int[] data = {
    		0, 1, 0, 0, 0, -2, 2, 0, -6, -6, 6, 0, -4, 4, -10, -14, 10, 4, 14, -30, -42, 0, -42, -18, 12, 30, 18, -12, 0, 18, 42, 0, -62, -8, -70, -20, -82, -28, -34, -62, -8, -26, 8, -62, 62, 34, -28, 8, -28, 28, 62, 82, -8, 98, 28, 0, -186, -84, -210, -60, -24, -150, -36, -102, -162, 0, -60, -90, 60, -90, -24, 84, -102, -126, 24, -66, -126, 66, 42, 126, 102, 24, 90, -60, 150, -36, 0, 186, 162, 102, -24, 60, -24, 24, 60, 84, 24, 126, -56, -310, -196, -238, -164, -254, -56, -310, 56, -254, 40, -338, -16, -394, -52, 16, -238, -322, 124, -130, -254, -56, -146, -16, 140, 16, -170, -130, -56, 56, -254, -214, -16, -58, -182, -238, 56, 124, 254, 130, -16, 58, 214, -40, 130, -124, -56, 74, -68, 170, 238, -16, -140, 146, 310, 56, -68, 68, -56, -16, 394, 338, 214, 124, 322, 56, 124, 418, 40, -16, 326, 434, 310, 124, 254, -762, -120, -882, -168, -678, -252, -762, -372, -930, -462, -204, -72, -834, -252, -372, -462, -72, -882, 120, -510, -438, -300, -390, 0, 72, -300, 168, -594, -204, -714, -132, 168, -462, -252, -762, -258, 132, -378, 204, -48, -558, -426, -510, 132, -630, 252, -510, -120, 48, -510, 372, -510, -186, 72, 204, -558, -390, -258, 0, -186, -558, 300, -210, -462, 372, 120, -258, -342, -138, -258, -252, 138, 462, -300, -420, 0, -120, -372, 90, 558, -204, 438, 186, 0, 258, -120, 306, 390, -372, 120, 378, 210, 630, 120, 258, 462, -48, 426, 306, 120, 510, -252, 630, -132, 0, 258, 642, 204, -168, 0, -48, 558, 180, -72, 762, 510, 0, 810, 438, 252, 642, 252, 510, 462, -48, 582, 204, 420, 810, 558, 48, 372, 252, 930, 300, 558, 120, -508, -1778, -620, -32, -1054, -1562, -280, -1166, -1922, 32, -80, -1102, -328, -836, -1858, -248, -112, -910, -1270, -1778, -428, -676, -788, -1810, -878, -1126, -1238, -724, 112, -136, -1666, -508, -248, -260, -1282, -620, -806, -292, -1054, -1562, -404, -742, 32, -476, -1498, -340, -80, -1610, -1022, 136, -1394, -148, 112, -1418, -1022, -694, 80, -428, -1138, 32, -662, -910, -1418, -260, -1282, -508, -626, -1382, 476, 364, 116, -392, 292, -1102, 508, -514, -1022, -1270, -112, -874, -1382, 620, 112, -650, -514, -1022, 260, -1270, 340, -682, -32, -280, 652, -1126, 292, 112, -910, -136, 508, -514, -266, 644, 136, -626, -298, 476, -32, -1166, -742, 676, -854, -80, 248, -1022, -626, 620, 112, -266, 508, -514, -806

    };
    int[] data2 = {
    		1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431

    };
    final int PAD = 200;
 
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                            RenderingHints.VALUE_ANTIALIAS_ON);
        int w = getWidth();
        int h = getHeight();
        // Draw ordinate.
        g2.draw(new Line2D.Double(PAD, PAD, PAD, h-PAD/2));
        // Draw abcissa.
        g2.draw(new Line2D.Double(PAD, h-PAD, w-PAD, h-PAD));
        g2.draw(new Line2D.Double(PAD,PAD,PAD,h));
        double xInc = (double)(w - 2*PAD)/(data.length-1);
        double scale = (double)(h - 2*PAD)/getMax();
        // Mark data points.
        g2.setPaint(Color.red);
        for(int i = 0; i < data.length; i++) {
            double x = PAD + i*xInc;
            double y = h - PAD - scale*data[i];
            g2.fill(new Ellipse2D.Double(x-2, y-2, 4, 4));
        }
        g2.setPaint(Color.black);
        for(int i = 0; i < data2.length; i++) {
            double x = PAD + i*xInc;
            double y = h - PAD - scale*data2[i];
            g2.fill(new Ellipse2D.Double(x-2, y-2, 2, 2));
        }
    }
 
    private int getMax() {
        int max = -Integer.MAX_VALUE;
        for(int i = 0; i < data.length; i++) {
            if(data[i] > max)
                max = data[i];
        }
        return max;
    }
 
    public static void main(String[] args) {
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.add(new GraphingData());
        f.setSize(400,400);
        f.setLocation(200,200);
        f.setVisible(true);
    }
}