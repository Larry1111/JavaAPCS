import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class GraphingData extends JPanel {
    int[] data = {
    		0, 0, 0, 0, 0, -18, -54, -72, -9, -63, 18, -36, 27, 9, -27, 18, -36, 45, -9, 54, 36, -18, 45, -9, 18, 0, -198, -594, -792, -198, -594, 0, -594, -792, -792, 0, -594, -198, -594, -198, -792, 0, 0, -198, -594, -792, 99, -99, -495, -693, -99, -693, 99, 99, -495, -99, -693, 99, -495, 99, -99, -99, -396, 198, 0, -396, 198, -396, -396, -594, 0, -594, -396, 0, -594, 0, -594, -396, 297, -495, -495, 297, 297, 99, -495, 99, -495, -297, 297, 99, -297, -495, -297, 297, -495, 198, -396, 396, 198, 396, -198, -198, 198, -396, 396, -198, -198, 198, -396, 495, -99, 297, -99, -297, 495, 495, 297, -99, 297, -297, 495, 297, -99, 297, 495, 594, -198, -198, 0, 396, -198, 396, 594, 0, 594, -198, 396, 0, 0, -99, 693, 693, 495, 99, -99, -99, 495, 99, -99, 495, 99, 693, 495, 99, 198, 792, 0, 0, 198, 792, 198, 594, 198, 792, 198, 594, 792, 198, -7992, -2088, -8082, -180, -270, -2268, -8262, -8352, -450, -540, -2538, -8532, -6714, -810, -2808, -6804, -1908, -7902, -5994, -2088, -8082, -360, -2358, -2448, -540, -630, -6624, -2718, 180, -1908, -5904, -1998, -7992, -90, -6084, -8172, -8262, -6444, -8442, -2538, -8532, -630, -6624, 270, -1728, -5724, -7812, 90, -5904, -270, -6264, -2358, -450, -8532, -7632, -1818, -5814, -7812, -1908, -7902, -5994, -90, -2088, -8082, -270, -360, -2358, -6354, -8352, -2448, -8442, 360, -1728, 180, -1908, -7902, -1998, -7992, -6084, -180, -8172, -2268, -6354, 540, -5454, -7452, -1548, -7542, 360, -5634, -5724, -5904, -1998, -5994, -7992, -2268, -6264, -8262, -7362, 450, -1548, -1638, 270, -5724, -1818, -7812, -5994, -2088, -6084, -8082, 720, 630, -1458, 450, -5634, 180, -5814, 90, -1908, -5904, -7902, -7992, 810, -5184, -1278, 540, -1458, -7542, 360, -1818, -7812, -5904, -1998, -5994, -7992, -999, 909, -5085, -5175, -7173, -7263, -1449, -1539, -7533, 279, -1719, -5715, -7713, -7803, 999, -999, -7083, 819, -5175, 729, -1269, -1359, 549, -7533, -819, -4815, -909, 999, -5085, -7083, -1179, 729, -5355, -7353, -1449, 459, -5535, -1629, -5625, -6723, 1179, -999, -6993, 909, -5085, 819, -5175, 639, -5355, 549, -1449, -7443, -1539, -7533, 1269, -4725, -819, -4905, 999, -4995, -7083, -5175, -1269, -5265, -549, 1269, 1179, -6813, -909, -6903, 999, -4995, -7173, 639, -1359, -6453, -4545, 1359, -729, -4815, -4905, -6903, -999, 909, -5085, -1179, -5175, -7173, -1269, -7263, -4365, 1539, -459, -6453, -6543, 1359, 1269, -6723, -819, -4905, -4995, -7083, 819, -5175, 1719, -279, -6363, -549, -4545, -639, 1269, -4725, 1179, -6903, -4995, -5085, -189, -6183, -4275, -4365, -6453, -639, -4635, -729, -6723, 1179, -6993, 1998, 1908, -6084, -180, -4266, 1638, -6354, 1458, -4536, -6624, -720, -6714, -5904, -5994, 1908, -4176, -450, -4446, -6444, 1368, -4626, 1278, 180, -5814, -3906, 1998, -5994, 1728, -270, -4266, -6264, 1548, -6624, 2268, -3726, 180, -5814, 90, -5904, 1998, -90, -4086, -6174, 1728, 1638, -360, -6444, 1458, -3636, 270, 90, -5994, -4086, 1818, -180, -4176, -6174, 1548, -6444, 2358, -3636, -3726, -5724, 180, -5814, 2088, -3906, -3996, -5994, 1818, 1728, -270, -360, -3456, 450, -3546, 360, 2268, -3726, 180, -5904, 1908, -90, -4086, 1728, -4266, 2628, -5364, -5454, -3546, 360, -5634, 2088, -3906, -5904, -5994, -180, -4176, 720, 2538, 540, 450, -3636, 2268, 270, 180, -3906, 1998, -5994, -3186, 2718, -3276, -5274, 630, -5364, 2538, 450, -3546, -3726, -5904, 2997, 999, -2997, 909, -5085, 2817, -3177, -5355, 2547, -3447, 369, -5625, 2187, 189, -5805, 2997, -3087, -5085, 819, -5175, 639, -3357, -5355, -3537, 3177, 3087, -2907, -4905, -4995, 2907, 2817, 819, 729, -5265, 2637, 2547, 549, 459, -5535, -3627, -2907, -2997, -4995, -5085, -3177, 729, 639, 2457, -3537, -4635, 3177, 1179, 2997, -2997, 2907, -3087, 819, 2637, 639, 549, -2547, 1359, -2637, -4635, 1269, -2907, -4905, 2907, -3087, 729, 2637, -3357, 1539, 3357, -2727, -4725, 1179, -4815, 3087, -2907, 999, 909, -5085, 2727, 1629, 3447, 1449, -4545, 1359, 3177, -4815, 909, -3087, -5085, 819, -5175, 3717, 1629, -2367, 3447, 3177, 3087, -2907, -4995, 1809, -4185, -4275, 3537, 1539, -2457, 1449, 3357, -2637, -2727, -4725, 1179, -2907, 999, -4995

    };
    final int PAD = 100;
 
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                            RenderingHints.VALUE_ANTIALIAS_ON);
        int w = getWidth();
        int h = getHeight();
        // Draw ordinate.
        g2.draw(new Line2D.Double(PAD, PAD, PAD, h-PAD/2));
        // Draw abcissa.
        g2.draw(new Line2D.Double(PAD, h-PAD, w-PAD, h-PAD));
        double xInc = (double)(w - 2*PAD)/(data.length-1);
        double scale = (double)(h - 2*PAD)/getMax();
        // Mark data points.
        g2.setPaint(Color.red);
        for(int i = 0; i < data.length; i++) {
            double x = PAD + i*xInc;
            double y = h - PAD - scale*data[i];
            g2.fill(new Ellipse2D.Double(x-2, y-2, 4, 4));
        }
    }
 
    private int getMax() {
        int max = -Integer.MAX_VALUE;
        for(int i = 0; i < data.length; i++) {
            if(data[i] > max)
                max = data[i];
        }
        return max;
    }
 
    public static void main(String[] args) {
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.add(new GraphingData());
        f.setSize(400,400);
        f.setLocation(200,200);
        f.setVisible(true);
    }
}