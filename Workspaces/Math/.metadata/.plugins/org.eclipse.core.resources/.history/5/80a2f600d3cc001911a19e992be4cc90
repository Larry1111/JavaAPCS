import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class GraphingData extends JPanel {
    int[] data = {
    		0, 0, 0, 0, -6, -3, 6, 0, -30, -30, 0, -30, 15, 15, -15, -15, 30, 0, 30, -126, -138, -24, -162, -114, -12, 24, 12, -114, -126, -12, 36, -126, -63, 39, -87, 63, -63, 39, -39, -51, 51, -27, 87, -63, 126, 114, -12, 12, -24, 24, 138, 126, -12, 162, 12, 0, -570, -180, -690, -60, -120, -630, -60, -510, -570, -120, -180, -570, 60, -570, -120, 60, -510, -630, 0, -570, -630, 60, -60, 120, 0, -390, 60, -570, 120, -450, -510, 180, 60, 0, -510, -330, -510, -390, -450, -330, -390, 0, 135, -375, 75, -255, 75, -255, 135, -375, 315, -315, 315, -255, 195, -375, 255, 195, -315, -255, 375, -135, -195, 195, -135, 315, 375, 315, -255, -135, 195, 375, -255, -135, 255, -75, -135, -255, 375, 315, 510, 450, 0, 330, 390, -120, 450, -60, -120, 330, 0, 510, 450, -60, -120, 390, 570, 60, 0, 0, -60, 60, 630, 510, 450, 120, 510, 120, 60, 690, 120, 0, 630, 690, 630, 60, 510, -2298, -504, -2802, -552, -2598, -348, -2394, -852, -2946, -1998, -204, -456, -2754, -252, -756, -2094, -552, -2898, 96, -2454, -1998, -708, -2046, -504, -48, -804, 144, -2154, -612, -2658, -156, 48, -2502, -756, -2802, -1794, -252, -2298, 204, -48, -2094, -2346, -2142, -348, -2646, 252, -2046, -504, -48, -2142, 348, -2454, -1746, 48, -204, -2502, -2046, -2298, -504, -1842, -2598, -108, -2154, -2406, 348, 96, -2202, -1998, -1794, -2298, -1794, -252, 456, -1842, -2346, -1638, -2142, -2394, -396, 552, -1746, 48, -204, -1542, 252, -2046, 204, -96, -2394, -1446, 348, -204, 504, -1542, -252, -48, -2094, 396, -108, -1446, 96, -2202, 504, -1794, -2046, -252, 252, -1338, -2094, -1638, -1686, 552, -1746, -1998, 756, 504, -1542, 708, -48, -1386, 156, -1698, 96, 48, -1998, 456, -1842, -1146, 396, 144, -1902, -1194, -1698, 804, -1746, 48, -1542, 771, -1779, 723, 927, -1119, -1371, 423, -1167, -1923, 1071, 1023, -1023, 519, 267, -1779, 471, 927, -927, -1479, -1731, 771, 267, 219, -1827, -879, -1383, -1431, 363, 1071, 567, -1731, 771, 519, 1023, -1023, 471, -867, 927, -1371, -1623, 879, -723, 819, 567, -1479, 1023, 771, -1527, -1323, 1179, -1119, 1119, 867, -1431, -1227, -771, 771, 519, -879, 867, -723, -1227, -1479, 1023, -1023, 519, -567, -1323, 1431, 1383, 879, 627, 1071, -771, 1479, -567, -819, -1323, 1179, -1119, -1371, 1623, 1371, -927, -471, -723, 1071, -1227, 1023, -1023, 1227, 723, 1671, -1131, 1119, 1323, -723, 819, 1527, -519, -267, 1731, 1479, -819, -363, 1179, 927, -1167, -471, 1779, -519, 1023, 1479, -1071, -867, 1371, 1119, -219, 1323, -723, -567, 1227, -123, -627, -879, 1119, 1827, 1323, 1527, -771, -252, -504, 1998, 1698, -852, 1902, 2094, -504, -756, 1998, 1242, -96, -348, 96, 1638, 2094, 1842, 1338, -48, 1746, 1494, -552, -108, 48, 1842, -456, 2046, -252, -504, 2298, 252, -504, 204, -552, 2202, -348, 1446, 1398, -648, -456, 2046, 1746, 1698, 2394, 2142, 96, -156, 1638, 252, -252, -48, 1494, 144, 1938, 1686, 348, 2142, -156, 2094, 48, 252, 1542, -504, 2046, 204, 1746, 2454, 156, -348, 2154, -144, 48, 252, 2046, 1794, -48, 2454, 2202, 1698, 348, -156, 2346, 48, 2502, 204, 1998, 648, 2646, 2394, 96, 1842, -204, 2046, 504, 252, 2046, 456, 2454, 2202, 2658, 804, 552, 2094, 48, 756, 2298, 252, 456, 204, -96, 2598, 2802, 756, 504, 2046, 708, 2502, 204, 2898, 852, 2394, 2346, 48, 252, 2046, -8190, -11250, -11490, -480, -1500, -10710, -2760, -3780, -11970, -240, -2520, -8910, -2760, -10950, -1020, -9210, -240, -8430, -3300, -8670, -1500, -11730, -720, -10950, 0, -2040, -9690, -720, -8910, -3780, -780, -9990, -1020, -9450, -3300, -2520, -780, -8970, -2040, -11250, -8430, -2280, -11490, 240, -7950, -2820, -10230, -240, -1260, -9450, -10470, -7950, -780, 0, -9210, -9450, -11490, -1500, -10710, -2580, -2820, -11010, -8190, -2040, -10230, -240, -9450, 480, -8730, -7950, -11010, -240, -8430, -2280, -3300, -10770, -8970, -11250, -8430, -1260, -2280, -11490, 480, -2580, 240, -11010, -3300, -8490, -2340, -1560, -8970, -2820, -9210, -7470, -300, -1320, -10530, -8730, -2580, -8970, -1800, -2820, -10230, 720, -8490

    };
    int[] data2 = {
    		1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670

    };
    final int PAD = 200;
 
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                            RenderingHints.VALUE_ANTIALIAS_ON);
        int w = getWidth();
        int h = getHeight();
        // Draw ordinate.
        g2.draw(new Line2D.Double(PAD, PAD, PAD, h-PAD/2));
        // Draw abcissa.
        g2.draw(new Line2D.Double(PAD, h-PAD, w-PAD, h-PAD));
        g2.draw(new Line2D.Double(PAD,PAD,PAD,h));
        double xInc = (double)(w - 2*PAD)/(data.length-1);
        double scale = (double)(h - 2*PAD)/getMax();
        // Mark data points.
        g2.setPaint(Color.red);
        for(int i = 0; i < data.length; i++) {
            double x = PAD + i*xInc;
            double y = h - PAD - scale*data[i];
            g2.fill(new Ellipse2D.Double(x-2, y-2, 4, 4));
        }
        g2.setPaint(Color.black);
        for(int i = 0; i < data2.length; i++) {
            double x = PAD + i*xInc;
            double y = h - PAD - scale*data2[i];
            g2.fill(new Ellipse2D.Double(x-2, y-2, 2, 2));
        }
    }
 
    private int getMax() {
        int max = -Integer.MAX_VALUE;
        for(int i = 0; i < data.length; i++) {
            if(data[i] > max)
                max = data[i];
        }
        return max;
    }
 
    public static void main(String[] args) {
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.add(new GraphingData());
        f.setSize(400,400);
        f.setLocation(200,200);
        f.setVisible(true);
    }
}