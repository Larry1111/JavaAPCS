import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class GraphingData extends JPanel {
    int[] data = {
    0, 0, 0, -6, -3, 6, 0, -30, -30, 0, -30, 15, 15, -15, -15, 30, 0, 30, -126, -138, -24, -162, -114, -12, 24, 12, -114, -126, -12, 36, -126, -63, 39, -87, 63, -63, 39, -39, -51, 51, -27, 87, -63, 126, 114, -12, 12, -24, 24, 138, 126, -12, 162, 12, 0, -570, -180, -690, -60, -120, -630, -60, -510, -570, -120, -180, -570, 60, -570, -120, 60, -510, -630, 0, -570, -630, 60, -60, 120, 0, -390, 60, -570, 120, -450, -510, 180, 60, 0, -510, -330, -510, -390, -450, -330, -390, 0, 135, -375, 75, -255, 75, -255, 135, -375, 315, -315, 315, -255, 195, -375, 255, 195, -315, -255, 375, -135, -195, 195, -135, 315, 375, 315, -255, -135, 195, 375, -255, -135, 255, -75, -135, -255, 375, 315, 510, 450, 0, 330, 390, -120, 450, -60, -120, 330, 0, 510, 450, -60, -120, 390, 570, 60, 0, 0, -60, 60, 630, 510, 450, 120, 510, 120, 60, 690, 120, 0, 630, 690, 630, 60, 510, -2298, -504, -2802, -552, -2598, -348, -2394, -852, -2946, -1998, -204, -456, -2754, -252, -756, -2094, -552, -2898, 96, -2454, -1998, -708, -2046, -504, -48, -804, 144, -2154, -612, -2658, -156, 48, -2502, -756, -2802, -1794, -252, -2298, 204, -48, -2094, -2346, -2142, -348, -2646, 252, -2046, -504, -48, -2142, 348, -2454, -1746, 48, -204, -2502, -2046, -2298, -504, -1842, -2598, -108, -2154, -2406, 348, 96, -2202, -1998, -1794, -2298, -1794, -252, 456, -1842, -2346, -1638, -2142, -2394, -396, 552, -1746, 48, -204, -1542, 252, -2046, 204, -96, -2394, -1446, 348, -204, 504, -1542, -252, -48, -2094, 396, -108, -1446, 96, -2202, 504, -1794, -2046, -252, 252, -1338, -2094, -1638, -1686, 552, -1746, -1998, 756, 504, -1542, 708, -48, -1386, 156, -1698, 96, 48, -1998, 456, -1842, -1146, 396, 144, -1902, -1194, -1698, 804, -1746, 48, -1542, 771, -1779, 723, 927, -1119, -1371, 423, -1167, -1923, 1071, 1023, -1023, 519, 267, -1779, 471, 927, -927, -1479, -1731, 771, 267, 219, -1827, -879, -1383, -1431, 363, 1071, 567, -1731, 771, 519, 1023, -1023, 471, -867, 927, -1371, -1623, 879, -723, 819, 567, -1479, 1023, 771, -1527, -1323, 1179, -1119, 1119, 867, -1431, -1227, -771, 771, 519, -879, 867, -723, -1227, -1479, 1023, -1023, 519, -567, -1323, 1431, 1383, 879, 627, 1071, -771, 1479, -567, -819, -1323, 1179, -1119, -1371, 1623, 1371, -927, -471, -723, 1071, -1227, 1023, -1023, 1227, 723, 1671, -1131, 1119, 1323, -723, 819, 1527, -519, -267, 1731, 1479, -819, -363, 1179, 927, -1167, -471, 1779, -519, 1023, 1479, -1071, -867, 1371, 1119, -219, 1323, -723, -567, 1227, -123, -627, -879, 1119, 1827, 1323, 1527, -771, -252, -504, 1998, 1698, -852, 1902, 2094, -504, -756, 1998, 1242, -96, -348, 96, 1638, 2094, 1842, 1338, -48, 1746, 1494, -552, -108, 48, 1842, -456, 2046, -252, -504, 2298, 252, -504, 204, -552, 2202, -348, 1446, 1398, -648, -456, 2046, 1746, 1698, 2394, 2142, 96, -156, 1638, 252, -252, -48, 1494, 144, 1938, 1686, 348, 2142, -156, 2094, 48, 252, 1542, -504, 2046, 204, 1746, 2454, 156, -348, 2154, -144, 48, 252, 2046, 1794, -48, 2454, 2202, 1698, 348, -156, 2346, 48, 2502, 204, 1998, 648, 2646, 2394, 96, 1842, -204, 2046, 504, 252, 2046, 456, 2454, 2202, 2658, 804, 552, 2094, 48, 756, 2298, 252, 456, 204, -96, 2598, 2802, 756, 504, 2046, 708, 2502, 204, 2898, 852, 2394, 2346, 48, 252, 2046, -8190, -11250, -11490, -480, -1500, -10710, -2760, -3780, -11970, -240, -2520, -8910, -2760, -10950, -1020, -9210, -240, -8430, -3300, -8670, -1500, -11730, -720, -10950, 0, -2040, -9690, -720, -8910, -3780, -780, -9990, -1020, -9450, -3300, -2520, -780, -8970, -2040, -11250, -8430, -2280, -11490, 240, -7950, -2820, -10230, -240, -1260, -9450, -10470, -7950, -780, 0, -9210, -9450, -11490, -1500, -10710, -2580, -2820, -11010, -8190, -2040, -10230, -240, -9450, 480, -8730, -7950, -11010, -240, -8430, -2280, -3300, -10770, -8970, -11250, -8430, -1260, -2280, -11490, 480, -2580, 240, -11010, -3300, -8490, -2340, -1560, -8970, -2820, -9210, -7470, -300, -1320, -10530, -8730, -2580, -8970, -1800, -2820, -10230, 720, -8490, -9510, 480, -7710, -2580, -10770, -11010, -10230, -7470, -540, -1560, -10770, -9990, -2820, -8190, -2040, -11250, -9450, 540, -10710, -7890, -9930, 0, -2040, -1260, -9690, -10710, 300, -720, -2040, -1260, -10470, 540, 300, -8910, -2760, -9210, -240, -7650, -8670, 240, -8970, 1020, -8190, -10230, -240, -1260, -9450, -8670, -2520, 1260, -6930, -780, -10230, -240, -8430, -9450, -2520, -10710, -6930, -9990, 1020, -8190, -9210, -480, -9690, 1260, 240, -1800, -8190, -8670, -7710, -540, -9750, -6930, 240, -780, -8970, 0, -7410, -1260, -2280, 480, -9750, 240, -1020, -2040, -10230, -240, -6930, -7950, -9990, -1020, -10230, -240, -2280, -6690, -9750, -6930, -780, -8970, 1020, 0, -9210, -2040, -8430, -1260, -300, -9510, -6930, -7950, -7170, 1740, -1560, -6930, -8190, -9210, -1320, 480, -8730, -9750, 240, -7170, -1020, -10230, -300, -8490, 480, 1260, -780, -7170, 0, -10230, -7170, -6390, -1260, 300, -7890, -8910, -6150, 0, -1020, 780, -7650, 1320, -7890, -1740, -9930, 1020, -9210, -8430, -1260, -7650, -1500, -6870, -720, 2040, -7170, 1800, -7410, -240, -9450, 540, -8670, 300, -1740, 1020, -8190, 1560, -6630, 1260, 240, 2040, -8190, -480, 2280, -6150, -7170, 0, -6390, -240, -8430, 1560, 540, -6930, -8970, -8190, -1260, -1500, -5670, 1500, 2280, -6930, 2040, -6150, -1020, -9210, 780, -9450, -540, 2280, 0, -8190, -8430, -1260, -6690, 480, -5910, -7170, -8190, -1020, 1800, -240, 480, -8730, 1260, -6930, -6150, -6390, -8430, -9450, 1740, -5910, 1260, -8970, 2040, -7170, -8190, 2760, -6450, -8490, 1500, 480, 1260, -7950, -6150, -9210, -5430, 2520, -540, -6930, -9210, 1740, 2520, -6690, 480, -8970, -7170, 1020, -5370, 780, -6630, -7650, -480, -5850, -720, 2040, -7170, -8190, 1800, -5850, 3060, -7170, 0, 780, -5610, 1560, 1320, -6870, 1020, 2580, -5850, 300, 1260, -7170, 2820, -5370, 1560, 540, -8670, 3300, -6930, -5130, 0, -5370, 780, 2580, 1560, -7650, -480, -5910, 1260, 2040, 1020, -8190, 1800, -6390, -5610, -6630, 2280, -6150, -7170, 2820, 1560, 540, 3540, -5670, -6690, -4890, -5910, 2040, -7170, -8190, -240, 1500, 480, -7710, 0, 2820, 1500, -7710, 2280, 3060, 0, -7410, 3540, 2520, -5670, -6690, 240, -5130, -8190, -6390, -240, 3780, 720, -7470, -6690, 1020, 1740, -6450, 3540, -5910, 2040, -7170, 2760, 3540, -5670, 1500, 480, 2280, -7950, 2040, -7170, -4650, 3300, -5910, -6930, -5130, -8190, 3855, -6375, 795, -5595, 1575, 555, -4815, -5115, 1035, 3855, -7395, -4575, 2595, 1575, -5835, 315, 2055, 3615, -6615, 3375, 1335, -4095, 3075, -4575, -5595, 555, -7635, -6855, -7875, 1275, -4095, 2595, 4335, 2295, -6915, 2055, -6135, -7155, -4575, 555, 3315, 3075, -5115, 3855, -7395, -4575, 2595, 4335, -4875, -5115, 1035, 2835, 1815, 3615, 2595, -6615, -3615, 2535, -6675, -5895, 4095, 3075, -6135, 3855, 1815, -5655, -6675, -4095, -5115, -4335, 2835, -7395, 3555, -4635, 4335, 1275, -6915, -4095, -5355, 795, -5895, 4095, 3075, 1035, -5355, -3375, 2775, -5415, -4875, 2295, -6915, -4095, 3075, 3795, 4575, -3615, 2535, -3855, -5895, -3375, -6435, 3555, -4875, 1275, 4095, -7155, 3795, 2775, 3555, 1515, -3855, -6915, -4095, 2055, 4095, -5115, -4335, 2835, 2595, 1335, 5115, -3075, 2055, -6375, -4575, -5595, 2355, 1335, -6855, 4095, -5355, 4635, -6615, 3375, -5835, 4095, -5115, 2055, -4335, 2835, 1815, -6375, 3375, -4815, -5835, 5355, -3855, -3075, 3075, -4335, 4635, 1575, -2835, -4875, -5895, -3555, 5355, 2295, -3075, -4095, 2055, -6135, -5355, 4635, 1575, 2295, -5895, 3075, 4875, -4575, 2595, 4575, -4635, -5655, 4335, -4095, 3075, 3855, -5355, -6375, -4635, -2835, 3315, 4095, 3075, -6135, -5355, 5595, -2595, -5655, -4875, -5895, 2055, -3315, -2595, 3555, -4635, 4335, 2295, -6135, 3855

    };
    final int PAD = 100;
 
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D)g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                            RenderingHints.VALUE_ANTIALIAS_ON);
        int w = getWidth();
        int h = getHeight();
        // Draw ordinate.
        g2.draw(new Line2D.Double(PAD, PAD, PAD, h-PAD/2));
        // Draw abcissa.
        g2.draw(new Line2D.Double(PAD, h-PAD, w-PAD, h-PAD));
        double xInc = (double)(w - 2*PAD)/(data.length-1);
        double scale = (double)(h - 2*PAD)/getMax();
        // Mark data points.
        g2.setPaint(Color.red);
        for(int i = 0; i < data.length; i++) {
            double x = PAD + i*xInc;
            double y = h - PAD - scale*data[i];
            g2.fill(new Ellipse2D.Double(x-2, y-2, 4, 4));
        }
    }
 
    private int getMax() {
        int max = -Integer.MAX_VALUE;
        for(int i = 0; i < data.length; i++) {
            if(data[i] > max)
                max = data[i];
        }
        return max;
    }
 
    public static void main(String[] args) {
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.add(new GraphingData());
        f.setSize(400,400);
        f.setLocation(200,200);
        f.setVisible(true);
    }
}